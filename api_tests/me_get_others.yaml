# Test generated by RoostGPT for test credential-artillery-test using AI Type Vertex AI and AI Model code-bison-32k


# RoostTestHash=ae6b8ce5ab

---
config:
  target: {{ $processEnvironment.API_HOST }}
  expect: true
  payload:
    file: me_get_others.csv
    skipHeader: true
    fields:
      - id
      - email
  security:
    ApiKeyAuth:
      type: 'apiKey'
      name: 'Token'
      in: 'header'
      value: {{$processEnvironment.AUTH_TOKEN}}
scenarios:
  - scenario: Failure cases
    flow:
      - get:
          url: /me/{{ id }}
          headers:
            Token: {{$processEnvironment.AUTH_TOKEN}}
          log: Fetching account details for user {{ id }}
          expect:
            statusCode: 404
      - post:
          url: /me
          headers:
            Token: {{$processEnvironment.AUTH_TOKEN}}
          payload:
            email: {{ email }}
          log: Creating a new account with email {{ email }}
          expect:
            statusCode: 400
            contentType: application/json
            hasProperty: error
            hasProperty: description
            hasProperty: schema_field
            hasProperty: value
            equals:
              error: validation/email-pattern
            matchesRegexp:
              description: "Email {{ email }} does not match the required pattern."
      - get:
          url: /me/{{ id }}
          headers:
            Token: invalidToken
          log: Fetching account details for user {{ id }} with invalid token
          expect:
            statusCode: 401
            contentType: application/json
            hasProperty: error
            hasProperty: description
            equals:
              error: error/unauthorized
            matchesRegexp:
              description: "Invalid authentication token."
      - get:
          url: /me/{{ id }}
          headers:
            Token: {{$processEnvironment.AUTH_TOKEN}}
          log: Fetching account details for non-existent user {{ id }}
          expect:
            statusCode: 404
      - get:
          url: /me/{{ id }}/non-existent-endpoint
          headers:
            Token: {{$processEnvironment.AUTH_TOKEN}}
          log: Fetching non-existent endpoint for user {{ id }}
          expect:
            statusCode: 404
      - get:
          url: /non-existent-endpoint
          headers:
            Token: {{$processEnvironment.AUTH_TOKEN}}
          log: Fetching non-existent endpoint
          expect:
            statusCode: 404
      - think: 500
